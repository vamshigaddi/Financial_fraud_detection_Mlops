name: workflow

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'

permissions:
  id-token: write
  contents: read

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Lint code
        run: |
          echo "Running linting..."
          # Replace with actual lint command, e.g., flake8 or pylint
          # pip install flake8
          # flake8 .

      - name: Run unit tests
        run: |
          echo "Running unit tests..."
          # Replace with your actual test command, e.g., pytest
          # pip install -r requirements.txt
          # pytest

  build-and-push-ecr-image:
    name: Continuous Delivery
    needs: integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Print ECR login details
        run: |
          echo "ECR Registry: ${{ steps.login-ecr.outputs.registry }}"
          echo "ECR Repository: ${{ secrets.ECR_REPOSITORY_NAME }}"
          echo "AWS ECR Login URI: ${{ secrets.AWS_ECR_LOGIN_URI }}"

      - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }} 
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
        IMAGE_TAG: latest
      run: |
        echo "Building Docker image..."
        echo "Tagging image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        
        # Build the Docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .

        echo "Pushing Docker image to ECR..."
        
        # Attempt to push the image
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG || {
          echo "Error pushing image to ECR. Repository Name: $ECR_REPOSITORY"
          echo "ECR Registry ID: $ECR_REGISTRY"
          exit 1

  Continuous-Deployment:
    needs: build-and-push-ecr-image
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Print ECR login details for deployment
        run: |
          echo "ECR Registry: ${{ steps.login-ecr.outputs.registry }}"
          echo "ECR Repository: ${{ secrets.ECR_REPOSITORY_NAME }}"
          echo "AWS ECR Login URI: ${{ secrets.AWS_ECR_LOGIN_URI }}"

      - name: Pull latest images
        run: |
          echo "Pulling latest Docker image..."
          docker pull ${{ secrets.AWS_ECR_LOGIN_URI }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest

      - name: Run Docker Image to serve users
        run: |
          echo "Running Docker container..."
          docker run -d -p 5000:5000 --name=fraud_detection \
            -e 'AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}' \
            -e 'AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}' \
            -e 'AWS_REGION=${{ secrets.AWS_REGION }}' \
            ${{ secrets.AWS_ECR_LOGIN_URI }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest

      - name: Clean previous images and containers
        run: |
          echo "Cleaning up unused Docker images and containers..."
          docker system prune -f


